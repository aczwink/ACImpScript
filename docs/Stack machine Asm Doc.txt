|-----------------|
|Reserved Keywords|
|-----------------|

SP	The stack pointer, it always points to the top of the stack.
BSP	The base stack pointer, points to the top of the stack directly after a call.


|-----------|
|Definitions|
|-----------|

offset	An offset must be a combination of SP or BSP and an integer.
	Examples: SP, BSP, SP-1, BSP+10

|-----------|
|Syscall Ids|
|-----------|

SYSCALL_PRINTI: Pops a value from the stack and sends it to output stream as integer.
SYSCALL_PRINTF: Pops a value from the stack and sends it to output stream as float.
SYSCALL_PRINTS: Pops a value from the stack and sends it to output stream as string.
SYSCALL_RAND: Pushes a random integer to the stack.


|-----------------------|
|General Instruction Set|
|-----------------------|


Instruction: anew
Description: Pops an element from the stack, creates a new array and pushes it to the stack.
	     The popped element is the number of elements in the array.


Instruction: call
Param 1: Name of a procedure
Description: Calls a procedure


Instruction: ldc
Param 1: constant
Description: Loads a constant from data block and pushes it to the stack.


Instruction: mov
Param 1: destination offset
Param 2: source offset
Description: Moves (copies) the value from source to destination.


Instruction: mova
Param 1: destination offset
Param 2: source offset
Description: Moves (copies) the value from source to the array at destination.
	     The index is taken from the stack, so one element is popped.


Instruction: pop
Description: Pops an element from the stack.


Instruction: push
Param 1: offset
Description: Pushes (copies) the stack element from the offset to the top of the stack.


Instruction: sel
Param 1: offset
Description: Pops an element from the stack, accesses the array at offset where the index is the popped
	     element.


Instruction: sysc
Param 1: Syscall Id
Description: Executes a system call


Instruction: ret
Description: Return from procedure


|-----------------------|
|Integer Instruction Set|
|-----------------------|


Instruction: add
Description: Pops two values from the stack and pushes their sum on it.


Instruction: inc
Param 1: offset
Description: Increments the value at offset.


Instruction: je
Param 1: Label where to jump
Description: Pops 2 values from the stack, if they are equal, the jump is taken.


Instruction: jl
Param 1: Label where to jump
Description: Pops 2 values from the stack, the jump is taken if the top element is less than the
	     below one.


Instruction: jle
Param 1: Label where to jump
Description: Pops 2 values from the stack, the jump is taken if the top element is less or equal
	     than the below one.


Instruction: jmp
Param 1: Label where to jump
Description: Unconditional jump, jumps to the label.


Instruction: jne
Param 1: Label where to jump
Description: Pops 2 values from the stack, if they are not equal, the jump is taken.


Instruction: jz
Param 1: Label where to jump
Description: Pops a value from the stack, if it is 0, the jump is taken.


Instruction: mul
Description: Pops 2 values from the stack and pushes their product on it.


Instruction: sub
Description: Subtracts the 2 elements on top of the stack and pushes the result on it.
	     The element on top must be the minuend and the element below the subtrahend.


|------------------------------|
|Floating-Point Instruction Set|
|------------------------------|


Instruction: addf
Description: Pops two values from the stack and pushes their sum on it.


Instruction: divf
Description: Pops 2 values from the stack, performs a floating-point division and pushes the result
	     on the stack.
	     The element on top must be the dividend and the element below it the divisor.


Instruction: i2f
Description: Pops a value, casts it from integer to float and pushes the result on the stack.


|----------------------|
|String Instruction Set|
|----------------------|