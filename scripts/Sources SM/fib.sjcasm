BLOCK CODE

#int fib(int n);
PROC fib
	push	BSP		#push n again on the stack
	jz		exit	#if n == 0, jump
	push	BSP		#push n again on the stack
	ldc		one		#push 1 to stack
	je		exit	#if n == 1, jump
	
	#if we reached here, n is >= 2
	#calc fib(n-1)
	ldc		one		#push 1 to stack
	push	BSP		#push n again on the stack
	sub				#n-1
	call	fib		#fib(n-1)
	#calc fib(n-2)
	ldc		two		#push 2 to stack
	push	BSP		#push n again on the stack
	sub				#n-2
	call	fib		#fib(n-2)
	#calc fib(n-1) + fib(n-2)
	add				#our to results are on the top of the stack, add them
	
	mov		BSP, SP	#copy our result
	pop				#and pop one (= pop the argument, so only the return value remains on the stack)
	
exit:				#if we jumped here and n is = 0 or = 1,
	ret				#the result is = n as fib(0) = 0 and fib(1) = 1
					#no need to do something as the argument on the stack is the return value
					
					#if n >= 2 the result is on top of the stack
END

PROC main
	ldc		zero	#int i = 0;
cond:
	#if i < n == false, jump
	push	BSP		#push our counter variable to the stack
	ldc		n		#push n to the stack
	jl		end
	
	
	#print fib(n) =
	ldc		out1
	sysc	SYSCALL_PRINTS
	push	BSP
	sysc	SYSCALL_PRINTI
	ldc		out2
	sysc	SYSCALL_PRINTS
	
	#calc fib(n) and print the result
	push	BSP		#push our counter variable to the stack
	call	fib		#calc fib(i)
	sysc	SYSCALL_PRINTI			#print result
	
	#print newline
	ldc		out3
	sysc	SYSCALL_PRINTS
	
	inc		BSP		#i++
	
	jmp		cond	#unconditional jump so loop is repeated
end:
	pop				#pop our counter variable
END

BLOCK DATA
	zero: 0
	one: 1
	two: 2
	
	n: 46	#fib(46) should be range of signed integer
	out1: "fib("
	out2: ") = "
	out3: "\n"